在 AARCH64 汇编语言中，将浮点数转换为整数涉及多种指令，每种指令都有其特定的用途和行为。以下是对这些指令的详细解释以及如何使用它们。
舍入与截断的概念
舍入：根据浮点数的小数部分决定是向上还是向下取整。例如，如果小数部分大于等于 0.5，则向上取整；否则向下取整。
截断：直接丢弃小数部分，只保留整数部分。截断可以朝零方向（Truncation Towards Zero）或远离零方向（Truncation Away From Zero）。
截断向零的转换
在 C 和 C++ 中，通过将浮点数强制转换为整数类型来实现截断向零。在 AARCH64 汇编中，使用 fcvtz 指令及其变体来实现这一功能。
fcvtzs：将浮点数截断为有符号整数。
fcvtzu：将浮点数截断为无符号整数。
示例代码：
        fcvtzs    x1, d0  // 将双精度浮点数 d0 截断为有符号 64 位整数，结果存储在 x1
        fcvtzu    w1, s0  // 将单精度浮点数 s0 截断为无符号 32 位整数，结果存储在 w1
远离零的截断
远离零的截断不能通过单条指令实现，需要结合条件判断和多条指令来完成。在 C 和 C++ 中，可以通过以下方式实现：
iv = (int(fv) == fv) ? int(fv) : int(fv) + ((fv < 0) ? -1 : 1);
在汇编中，可以通过以下步骤实现：
比较浮点数与零。
根据比较结果，使用 frintp（向上取整）或 frintm（向下取整）。
将结果截断为整数。
示例代码：
RoundAwayFromZero:
        fcmp    d0, 0
        ble     1f
        // 值为正数，向上取整
        frintp  d0, d0
        b       2f
1:      // 值为负数，向下取整
        frintm  d0, d0
2:      fcvtzs  x0, d0
        ret
正常的舍入转换
frinta 指令用于执行我们通常理解的舍入操作，即“四舍五入”。它将浮点数转换为最接近的整数，如果小数部分正好为 0.5，则远离零的方向取整。
示例代码：
        frinta   d0, d0  // 将 d0 舍入为最接近的整数
将整数转换为浮点数
在 C 和 C++ 中，将整数转换为浮点数通过强制类型转换实现。在 AARCH64 汇编中，使用 scvtf 和 ucvtf 指令：
scvtf：将有符号整数转换为浮点数。
ucvtf：将无符号整数转换为浮点数。
示例代码：
        scvtf    d0, x0  // 将有符号 64 位整数 x0 转换为双精度浮点数，结果存储在 d0
        ucvtf    s0, w0  // 将无符号 32 位整数 w0 转换为单精度浮点数，结果存储在 s0
总结
截断向零：使用 fcvtzs 和 fcvtzu 指令，分别生成有符号和无符号整数。
远离零的截断：需要结合条件判断和 frintp、frintm 指令实现。
正常的舍入：使用 frinta 指令实现四舍五入。
整数到浮点数的转换：使用 scvtf 和 ucvtf 指令，分别处理有符号和无符号整数。
通过这些指令，可以在 AARCH64 汇编语言中灵活地处理浮点数与整数之间的转换。

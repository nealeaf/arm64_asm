switch 语句的优化方式
1. 长链的 if/else 结构
描述：对于较小的 switch 语句，或者当 case 值没有明显规律且很少有连续值时，编译器可能会将 switch 语句实现为长链的 if/else 结构
  if (x == 0) {
      // case 0
  } else if (x == 1) {
      // case 1
  } else if (x == 2) {
      // case 2
  } // ...
2. 二分查找
描述：当 case 值有规律但不完全连续时，编译器可能会使用二分查找来快速定位正确的 case。
示例：假设 case 值是 [0, 1, 2, 10, 20, 30]，编译器可以通过二分查找快速定位到目标 case。
3. 跳转表（Jump Table）
描述：当 case 值大多是连续的时，编译器会使用跳转表来实现 switch 语句。跳转表是一种高效的实现方式，可以快速定位到目标 case
优点：跳转表可以显著减少分支指令的数量，提高程序的执行效率
以下是一个使用跳转表的示例代码：
  #include <stdlib.h>                                                // 1
  #include <stdio.h>                                                 // 2
  #include <time.h>                                                  // 3
  
  int main()                                                          // 5
  {                                                                   // 6
      int r;                                                          // 7
  
      srand(time(0));                                                 // 9
      r = rand() & 7;                                                 // 10
      switch (r)                                                      // 11
      {                                                               // 12
          case 0:                                                     // 13
              puts("0 returned");                                     // 14
              break;                                                  // 15
  
          case 1:                                                     // 17
              puts("1 returned");                                     // 18
              break;                                                  // 19
  
          case 2:                                                     // 21
              puts("2 returned");                                     // 22
              break;                                                  // 23
  
          case 3:                                                     // 25
              puts("3 returned");                                     // 26
              break;                                                  // 27
      }                                                               // 28
      return 0;                                                       // 29
  }                                                                   // 30
跳转表的汇编实现
假设 r 的值已经存储在寄存器 x0 中，跳转表的汇编代码如下：
  jt:     b       0f
          b       1f
          b       2f
          b       3f
          b       4f
          b       5f
          b       6f
          b       7f
  
  lsl     x0, x0, 2              // 1
  ldr     x1, =jt                // 2
  add     x1, x1, x0             // 3
  br      x1                     // 4
  
  0:      ldr     x0, =ZR        // 1
          bl      puts           // 2
          b       99f            // 3
  
  1:      ldr     x0, =ON        // 5
          bl      puts           // 6
          b       99f            // 7
  
  2:      ldr     x0, =TW        // 9
          bl      puts           // 10
          b       99f            // 11
  
  3:      ldr     x0, =TH        // 13
          bl      puts           // 14
          b       99f            // 15
  99:     ret
  跳转表的构建：
  每个 b 指令占用 4 字节。
  跳转表的地址存储在 jt 标签中。
  计算跳转地址：
  lsl x0, x0, 2：将 x0 的值左移 2 位，相当于乘以 4。
  ldr x1, =jt：将跳转表的地址加载到 x1。
  add x1, x1, x0：将 x0 的值加到 x1，得到目标跳转地址。
  br x1：跳转到目标地址。
跳转目标：
每个 case 对应一个跳转目标，目标地址存储在跳转表中。
跳转表的优化
1. 连续值的优化
如果 case 值是连续的，跳转表可以高效地实现直接跳转。
例如，case 值是 [0, 1, 2, 3, 4, 5, 6, 7]，跳转表可以直接定位到目标 case。
2. 非连续值的优化
如果 case 值有间隔，可以在跳转表中插入空跳转（stub）。
例如，case 值是 [0, 1, 2, 3, 5, 6, 7]，跳转表中可以插入一个空跳转来处理 case 4：
  jt:     b       0f
          b       1f
          b       2f
          b       3f
          b       99f  // 空跳转
          b       5f
          b       6f
          b       7f
3. 多范围值的优化
如果 case 值分布在多个范围内，可以使用多个跳转表，并通过 if/else 选择使用哪个跳转表。
例如，case 值是 [0-9] 和 [50-59]，可以使用两个跳转表：
  if (x < 10) {
      // 使用第一个跳转表
  } else if (x >= 50 && x < 60) {
      // 使用第二个跳转表
  }
4. 二分查找的优化
如果 case 值范围很广，可以使用二分查找来缩小范围，然后在小范围内使用跳转表或其他技术。
例如，case 值是 [0-1000]，可以使用二分查找定位到一个小范围 [0-9]，然后使用跳转表。
总结
跳转表的优点：跳转表可以显著减少分支指令的数量，提高程序的执行效率。
编译器的智能优化：编译器会根据
